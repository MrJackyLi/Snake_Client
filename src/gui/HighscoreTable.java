package gui;

/**
 * Created by Jacky on 29/11/15.
 * This class (Highscore class) contains the needed handlings(Which has been autogenerated(override, is deleted..), display and arraylist for the JTable in the highscore.class.
 * extends abstracttablemodel
 */

/**
 * Import all needed imports for this panel/class.
 */

import sdk.Score;

import javax.swing.table.AbstractTableModel;
import java.util.ArrayList;

public class HighscoreTable extends AbstractTableModel {

    //Needed variables for the class/table
    private ArrayList<Score> highscores;
    //columns in the JTable
    private String[] columns = {"Username", "Score", "Game id"};
    //number of rows int JTable
    private int numberOfRows;

    public HighscoreTable(ArrayList<Score> highscores) {

        this.highscores = highscores;
    }

    /**
     * The method gets the number of columns for the JTable
     * @return columns.length
     */

    public int getColumnCount() {

        return columns.length;
    }

    /**
     *
     * @param columnIndex
     * @return super.getColumnClass(columnIndex)
     */
    //Identify needed column class'
    public Class<?> getColumnClass(int columnIndex) {
        return super.getColumnClass(columnIndex);
    }

    /**
     * Get the needed number of rows, according to the database and sets the tables' number of rows.
     * @return numberOfRows
     */
    public int getRowCount() {
        numberOfRows = highscores.size();
        return numberOfRows;
    }

    /**
     * Gets the columns and the names of it and sets it
     * @param columnIndex
     * @return columns[columnIndex]
     */
    public String getColumnName(int columnIndex) {
        return columns[columnIndex];
    }

    /**
     * The method gets the specific values; username, score and gameid to the specific columns and rows
     * @param rowIndex
     * @param coloumnIndex
     * @return null
     */
    public Object getValueAt(int rowIndex, int coloumnIndex) {
        highscores.get(rowIndex);
        switch (coloumnIndex) {
            case 0:
                return highscores.get(rowIndex).getUser().getUsername();
            case 1:
                return highscores.get(rowIndex).getScore();
            case 2:
                return highscores.get(rowIndex).getGame().getGameId();
        }
        return null;
    }
}